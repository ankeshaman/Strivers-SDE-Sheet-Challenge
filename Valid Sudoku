import java.util.HashSet;

public class Solution {

	public static boolean isItSudoku(int board[][]) {

		// Write your code here.
		return helper(board,0,0);
	}
	 public static boolean helper(int[][] matrix, int row, int col) {

        if (row == matrix.length) {

            return true;

        }

        int nrow, ncol;

        if (col == matrix.length - 1) {

            nrow = row + 1;

            ncol = 0;

        } else {

            nrow = row;

            ncol = col + 1;

        }

        if (matrix[row][col] != 0) {

            return helper(matrix, nrow, ncol);

        } else {

            for (int i = 1; i <= 9; i++) {

                if (isSafe(matrix, row, col, i)) {

                    matrix[row][col] = i;

                    if (helper(matrix, nrow, ncol)) {

                        return true;

                    } else {

                        matrix[row][col] = 0;

                    }

                }

            }

            return false;

        }

    }
	public static boolean isSafe(int[][] board,int r,int c,int val){
		for(int i=0;i<board[0].length;i++){
			if(board[r][i]==val){
				return false;
			}
		}
		for(int i=0;i<board.length;i++){
			if(board[i][c]==val){
				return false;
			}
		}
		int row=(r/3)*3;
		int col=(c/3)*3;
		for(int i=row;i<row+3;i++){
			for(int j=col;j<col+3;j++){
				if(board[i][j]==val){
					return false;
				}
			}
		}
		return true;
	}
}
